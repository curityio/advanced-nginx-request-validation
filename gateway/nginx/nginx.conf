#
# A customized version of the default openresty file
#

#pcre_jit on;
error_log logs/error.log debug;

events {
    worker_connections  1024;
}

http {
    lua_package_path "/path/to/lua-resty-jwt/lib/?.lua;;";
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    # Include SSL certificate
    log_format combined_ssl '$remote_addr - $remote_user [$time_local] '
                            '$ssl_protocol/$ssl_cipher '
                            '$ssl_client_escaped_cert'
                            '"$request" $status $body_bytes_sent '
                            '"$http_referer" "$http_user_agent"';
    # Enable SSL in access log
    #access_log logs/access.log combined_ssl;

    server {
        listen 80;
        listen 443 ssl;
        server_name localhost;

        # SSL settings
        ssl_certificate      /tmp/cert.pem;
        ssl_certificate_key  /tmp/cert.key;
        ssl_client_certificate /tmp/ca-bank-chain.pem;
        ssl_verify_client on;
        ssl_session_timeout  5m;

        resolver local=on ipv6=off;

        # Keep for testing connection
        location / {
          root   /usr/local/openresty/nginx/html;
          index  index.html index.htm;
        }

        # TODO: exclude anonymous endpoint
        location /oauth/v2/ {
          if ($ssl_client_verify != SUCCESS) {
            return 403;
          }

          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Client-SSL-Cert $ssl_client_escaped_cert;

          # Enable proxy authentication
          #proxy_set_header Proxy-Authorization "Basic Z2F0ZXdheTpQYXNzd29yZDEK";
          #proxy_set_header Proxy-Authorization "Basic Z2F0ZXdheTpQYXNzd29yZAo=";

          access_by_lua_block {
            local dcr_request = require "dcr-request"
            local cjson = require "cjson"
            local http_method = ngx.var.request_method

            local metadata_valid = false
            local err = "Client metadata does not meet regulatory requirements."

            if http_method == "POST"
            then
              ngx.req.read_body()
              local http_body_data = ngx.req.get_body_data()
              metadata_valid, err = pcall(dcr_request.validate, http_body_data)
              --TODO log error
            end

            if metadata_valid == true
            then
              ngx.exit(ngx.OK)
            else
              ngx.status = ngx.HTTP_BAD_REQUEST
              ngx.say(cjson.encode({
                error = "invalid_client_metadata",
                error_description = err
                }))
              return ngx.exit(ngx.HTTP_BAD_REQUEST)
            end
          }

          # Forward request
          proxy_pass http://internal-curity-runtime:8443;

        }
    }
}
